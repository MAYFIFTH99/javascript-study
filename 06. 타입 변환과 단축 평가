# 타입 캐스팅

```javascript
var x = 10;

var str = x.toString();
console.log(typeof str, str); // string 10

console.log(typeof( x, x);
```

명시적 타입 변환이나 암묵적 타입 변환을 한다고 해서 기존 원시 값을 직접 변경하는 것은 아니다.

원시 값은 변경 불가능한 `불변 값`이므로 변경할 수 없다.

따라서 타입 변환을 하게 되면 기존 원시 값을 사용해 새로운 타입의 원시 값을 생성한다.

---

### 문자열 타입 변환

1. String 생성자 함수를 new 연산자 없이 호출하는 방법
2. Object.prototype.toString 메서드를 사용하는 방법
3. 문자열 연결 연산자를 이용하는 방법

```javascript
// 1.
String(1); // "1"
String(NaN); // "NaN"
String(Infinity); // "Infinity"
String(true); // "true"

// 2.
(1).toString();
(NaN).toString();
(Infinity).toString();

// 3.
1 + '';
NaN + '';
Infinity + '';
```

### 숫자 타입 변환

1. Number 생성자 함수를 new 연산자 없이 호출하는 방법
2. parseInt, parseFloat 함수를 사용하는 방법
3. (+)단항 산술 연산자를 이용하는 방법
4. (*)산술 연산자를 이용하는 방법

```javascript
// 1.
Number('0');

// 2.
parseInt('0');

// 3.
+'0';

// 4.
'0' * 1;
```

### 불리언 타입 변환

- Boolean('');
- 생략


---

# 단축 평가(단락 평가)

단락 평가에 대한 내용은 따로 설명하지 않고, 이게 언제 사용되는지 보자.
(간단히 말하면 모든 조건을 비교하지 않고 선행 조건과 연산자로만 전체 조건식을 판별할 수 있는 경우 빠르게 종료하는 것을 의미)

**1. 객체를 가리키기를 기대하는 변수가 null 혹은 undefined 인지 확인한 뒤, 프로퍼티를 참조하고 싶을 때 사용하면 유용하다.**

- 단락 평가를 사용하지 않는 경우(참조 에러 발생)
```javascript
var elem = null;
var value = elem.value;
```

- 단락 평가를 사용하는 경우(에러 발생 X)
```javascript
var elem = null
var value = elem && elem.value; --> null
```

> 이렇게 할 수도 있고, 옵셔널 체이닝이라고 해서 `?.` 을 이용해서 체크하는 방법도 있다. 뒤에서 설명한다.

** 2. 함수 매개변수에 기본 값을 설정할 때 유용하다.**

- 함수를 호출할 때 인수를 전달하지 않으면 매개변수에는 `undefined`가 할당된다.
- 이때 단축 평가를 사용해 매개변수의 기본 값을 설정하면 undefined로 인해 발생할 수 있는 에러를 방지할 수 있다.

```javascript
// 단축 평가를 사용한 매개변수의 기본 값 설정
function getStringLength(str) {
  str = str || '';
  return str.length;
}

getStringLength(); // 0
getStringLength('hi'); // 2

// ES6의 매개변수의 기본값 설정
// ES6 스펙부터 매개변수의 default 값을 설정할 수 있는 기능 추가됨
function getStringLength(str =  ''){
  return str.length;
}

getStringLength();
getStringLength('hi');
```

---
# 옵셔널 체이닝 연산자

`ES11`에섣 도입된 옵셔널 체이닝 연산자 `?.`는 좌항의 피연산자가 null 또는 undefined인 경우 undefined를 반환하고, 그렇지 않으면 우항의 프로퍼티 참조를 이어간다.

```javascript
var elem = null;

var value = elem?.value;
```

> 자바의 Optional<?>과 비슷한 것 같다.
자바스크립트의 옵셔널 체이닝 연산자가 없을 때는 단락 평가를 이용해서 null 값이 아닌 undefined를 반환해 참조 에러(런타임)를 회피한 것 같다.

---

## null 병합 연산자

`ES11` 에서 도입된 null 병합 연산자 `??`는 좌항의 피연산자가 null or undefined인 경우 우항의 피연산자를 반환하고, 그렇지 않으면 좌항의 피연산자를 반환한다.

- null 병합 연산자 ??는 변수에 기본 값을 설정할 때 유용하다.

```javascript
var foo = null ?? 'default string';
```
- null 병합 연산자 기능이 없던 시절에는 `||` 논리 연산자를 이용해 단축 평가로 null 값은 회피했다.
```javascript
var foo = '' || 'default string';
```
